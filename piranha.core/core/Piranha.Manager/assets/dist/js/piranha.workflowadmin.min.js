/*
 * Copyright (c) .NET Foundation and Contributors
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 *
 * https://github.com/piranhacms/piranha.core
 *
 */

piranha.workflowadmin=new Vue({el:"#workflowadmin",data:{loading:!0,activeTab:"workflows",workflows:[],roleAssignments:[],contentItems:[],users:[],workflowRoles:["Admin","Editor","LegalReviewer"],allStates:[],selectedStateFilter:"",selectedWorkflowHistory:null,newRoleAssignment:{username:"",role:""}},methods:{load:function(){this.loading=!0,fetch(piranha.baseUrl+"manager/api/workflow/definitions").then(e=>e.json()).then(e=>{this.workflows=e,this.allStates=[],e.forEach(e=>{e.states.forEach(e=>{this.allStates.find(t=>t.id===e.id)||(e.availableTransitions=e.transitions||[],this.allStates.push({id:e.id,name:e.name}))})}),this.loading=!1,this.loadRoleAssignments(),this.loadContentItems(),this.loadUsers()}).catch(e=>{console.log("error:",e),this.loading=!1})},loadRoleAssignments:function(){fetch(piranha.baseUrl+"manager/api/workflow/roleassignments").then(e=>e.json()).then(e=>{this.roleAssignments=e}).catch(e=>{console.log("error:",e)})},loadContentItems:function(){fetch(piranha.baseUrl+"manager/api/workflow/content").then(e=>e.json()).then(e=>{this.contentItems=e}).catch(e=>{console.log("error:",e)})},loadContentByState:function(){let e=piranha.baseUrl+"manager/api/workflow/content";this.selectedStateFilter&&(e+="?stateId="+this.selectedStateFilter),fetch(e).then(e=>e.json()).then(e=>{this.contentItems=e}).catch(e=>{console.log("error:",e)})},loadUsers:function(){fetch(piranha.baseUrl+"manager/api/users").then(e=>e.json()).then(e=>{this.users=e}).catch(e=>{console.log("error:",e)})},showAddRoleModal:function(){this.newRoleAssignment={username:"",role:""},$("#addRoleModal").modal("show")},addRoleAssignment:function(){this.newRoleAssignment.username&&this.newRoleAssignment.role?fetch(piranha.baseUrl+"manager/api/workflow/roleassignments",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.newRoleAssignment)}).then(e=>{if(!e.ok)throw new Error("Failed to add role assignment");return e.json()}).then(()=>{piranha.notifications.success("Role assignment added successfully"),$("#addRoleModal").modal("hide"),this.loadRoleAssignments()}).catch(e=>{piranha.notifications.error("Failed to add role assignment: "+e.message)}):piranha.notifications.error("Please select both user and role")},removeRoleAssignment:function(e){confirm("Are you sure you want to remove this role assignment?")&&fetch(piranha.baseUrl+"manager/api/workflow/roleassignments/"+e,{method:"DELETE"}).then(e=>{if(!e.ok)throw new Error("Failed to remove role assignment");piranha.notifications.success("Role assignment removed successfully"),this.loadRoleAssignments()}).catch(e=>{piranha.notifications.error("Failed to remove role assignment: "+e.message)})},viewWorkflowHistory:function(e){fetch(piranha.baseUrl+"manager/api/workflow/state/"+e).then(e=>e.json()).then(e=>{this.selectedWorkflowHistory=e,$("#historyModal").modal("show")}).catch(e=>{piranha.notifications.error("Failed to load workflow history: "+e.message)})},formatDate:function(e){return e?new Date(e).toLocaleString():""},getStateBadgeClass:function(e){switch(e){case"draft":return"badge-secondary";case"review":return"badge-info";case"legal_review":return"badge-warning";case"approved":return"badge-primary";case"published":return"badge-success";case"archived":return"badge-dark";default:return"badge-light"}}}});