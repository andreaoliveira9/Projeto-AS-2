@page "~/manager/post/{routeAction}/{id}/{postType?}"
@model PostEditViewModel
@inject ManagerLocalizer Localizer
@{
    ViewBag.Title = Localizer.Page["Edit post"];
    ViewBag.MenuItem = "Pages";
    string action = ((string)RouteData.Values["routeAction"]).ToLower();
}
@section script
{
    <script src="@Url.Content(Piranha.Manager.Editor.EditorScripts.MainScriptUrl)"></script>
    <script src="@Url.Content(Piranha.Manager.Editor.EditorScripts.EditorScriptUrl)"></script>
    <script src="~/manager/assets/js/piranha.components.min.js?v=@Piranha.Utils.GetAssemblyVersionHash(typeof(Piranha.Manager.Module).Assembly)"></script>
    <script src="~/manager/assets/js/piranha.postedit.min.js?v=@Piranha.Utils.GetAssemblyVersionHash(typeof(Piranha.Manager.Module).Assembly)"></script>

    @if (action == "edit")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.postedit.load("@RouteData.Values["id"]");
                $(".title input").focus();
            });
        </script>
    }
    else if (action == "add")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.postedit.create("@RouteData.Values["id"]", "@RouteData.Values["postType"]");
                $(".title input").focus();
            });
        </script>
    }
}

<div id="postedit">
    <div class="top">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">@Localizer.Menu["Content"]</li>
                <li class="breadcrumb-item"><a href="~/manager/pages">@Localizer.Menu["Pages"]</a></li>
                <li class="breadcrumb-item"><a :href="piranha.baseUrl + 'manager/page/edit/' + blogId">@Localizer.General["Edit"]</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Localizer.Post["Edit post"]</li>
                <li v-if="isScheduled" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-info"><i class="fas fa-calendar-alt"></i> @Localizer.General["Scheduled"]</span></li>
                <li v-if="state === 'unpublished'" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-info"><i class="fas fa-unlink"></i> @Localizer.General["Unpublished"]</span></li>
                <li v-if="state === 'draft'" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-info"><i class="fas fa-pen"></i> @Localizer.General["Draft"]</span></li>
            </ol>
        </nav>

        <div class="container-fluid app" :class="{ ready: !loading }">
            <div class="top-nav">
                @foreach (var postAction in Piranha.Manager.Actions.Toolbars.PostEdit)
                {
                    <partial name="@postAction.ActionView" />
                }
            </div>
        </div>
    </div>

    <div class="container-fluid app" :class="{ ready: !loading }">
        <!-- Content navigation - MODIFIED TO INCLUDE AUDIT TAB -->
        <ul v-if="(useBlocks && (editors.length + contentRegions.length > 0)) || editors.length + contentRegions.length > 1 || (enableComments && (commentCount > 0 || pendingCommentCount > 0)) || state !== 'new'" class="nav nav-pills nav-pills-card justify-content-center">
            <li v-if="useBlocks" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion({ uid: 'uid-blocks' })" :class="{ active: selectedRegion.uid === 'uid-blocks' }" href="#">
                    <i class="fas fa-pen-alt"></i>@Localizer.General["Main content"]
                </a>
            </li>
            <li v-for="editor in editors" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion(editor)" :class="{ active: selectedRegion.uid == editor.uid }" href="#">
                    <i :class="editor.icon"></i>{{ editor.name }}
                </a>
            </li>
            <li v-for="region in contentRegions" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion(region.meta)" :class="{ active: selectedRegion.uid == region.meta.uid }" href="#">
                    <i :class="region.meta.icon"></i>{{ region.meta.name }}
                </a>
            </li>
            <li v-if="enableComments && (commentCount > 0 || pendingCommentCount > 0)" class="nav-item">
                <a :href="piranha.baseUrl + 'manager/comments/' + id" target="comments" class="nav-link">
                    <i class="fas fa-comments"></i>@Localizer.General["Comments"]
                    <span v-if="pendingCommentCount > 0" class="badge badge-danger">{{ pendingCommentCount }}</span>
                </a>
            </li>
            <!-- ADD AUDIT HISTORY TAB - Only show for existing posts -->
            <li v-if="state !== 'new'" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion({ uid: 'uid-audit' })" :class="{ active: selectedRegion.uid === 'uid-audit' }" href="#">
                    <i class="fas fa-history"></i>@Localizer.General["Audit History"]
                </a>
            </li>
        </ul>

        <!-- Title -->
        <div class="card">
            <div class="card-body">
                <div class="form-group title">
                    <div class="row">
                        <div class="col">
                            <input v-model="title" type="text" class="form-control form-control-lg" placeholder="@Localizer.Post["Your post title"]">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-sm-6">
                            <div class="form-group mb-0">
                                <label style="display:none">@Localizer.Post["Category"]</label>
                                <select id="selectedCategory" class="form-control select2" v-model="selectedCategory">
                                    <option :value="item" v-for="item in categories">{{ item }}</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group mb-0">
                                <label style="display:none">@Localizer.Post["Tags"]</label>
                                <select id="selectedTags" class="form-control select2" multiple="multiple" v-model="selectedTags">
                                    <option :value="item" v-for="item in tags">{{ item }}</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Blocks -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != 'uid-blocks' }">
            <div class="card-body">
                <div id="content-blocks" class="blocks">
                    <a href="#" class="block-add unsortable" v-on:click.prevent="piranha.blockpicker.open(piranha.postedit.addBlock, 0)">
                        <hr>
                        <i class="fas fa-plus-circle"></i>
                    </a>
                    <div v-for="(block, index) in blocks" v-bind:key="block.meta.uid">
                        <div :class="'block ' + block.meta.component + (block.meta.isCollapsed ? ' collapsed' : '') + (block.meta.width === 'full' ? ' block-full' : '')">
                            <div :id="'tb-' + block.meta.uid" class="component-toolbar"></div>
                            <div class="block-header">
                                <div class="title">
                                    <i :class="block.meta.icon"></i><strong>{{ block.meta.name }}</strong> <span v-if="!block.meta.isGroup && block.meta.isCollapsed">- {{ block.meta.title }}</span>
                                </div>
                                <div class="actions">
                                    <span v-on:click.prevent="collapseBlock(block)" class="btn btn-sm">
                                        <i v-if="block.meta.isCollapsed" class="fas fa-chevron-down"></i>
                                        <i v-else class="fas fa-chevron-up"></i>
                                    </span>
                                    <span class="btn btn-sm handle">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </span>
                                    <button v-on:click.prevent="removeBlock(block)" class="btn btn-sm danger block-remove" tabindex="-1">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <component v-if="!block.meta.isGroup" v-bind:is="block.meta.component" v-bind:uid="block.meta.uid" v-bind:toolbar="'tb-' + block.meta.uid" v-bind:model="block.model" v-on:update-title='updateBlockTitle($event)'></component>
                            <component v-if="block.meta.isGroup" v-bind:is="block.meta.component" v-bind:uid="block.meta.uid" v-bind:toolbar="'tb-' + block.meta.uid" v-bind:model="block"></component>
                        </div>
                        <a href="#" class="block-add" v-on:click.prevent="piranha.blockpicker.open(piranha.postedit.addBlock, index + 1)">
                            <hr>
                            <i class="fas fa-plus-circle"></i>
                        </a>
                    </div>
                    <div v-if="blocks.length == 0" class="empty-info">
                        <p>@Localizer.Post["Welcome to your new post. Click on the button above to add your first block of content!"]</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Custom Editors -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != editor.uid }" v-for="editor in editors">
            <div class="card-body">
                <div class="region-center">
                    <component v-bind:is="editor.component" v-bind:uid="editor.uid" v-bind:id="id"></component>
                </div>
            </div>
        </div>

        <!-- Content Regions -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != region.meta.uid }" v-for="region in contentRegions">
            <div class="card-body">
                <div class="region" :class="{ 'region-center': region.meta.width === 'centered' }">
                    <region v-bind:content="'post'" v-bind:type="typeId" v-bind:model="region"></region>
                </div>
            </div>
        </div>

        <!-- Comments -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != 'uid-comments' }">
            <div class="card-body">
                <div class="region region-center">
                    <h2>Comments</h2>
                </div>
            </div>
        </div>

        <!-- AUDIT HISTORY TAB CONTENT -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != 'uid-audit' }">
            <div class="card-body">
                <div id="audit-history-container">
                    <!-- Script para inicialização -->
                    <script>
                        // Garante que o erro não seja exibido inicialmente
                        document.addEventListener('DOMContentLoaded', function() {
                            var errorEl = document.getElementById('audit-error');
                            if (errorEl) errorEl.style.display = 'none';
                        });
                    </script>
                    
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3 class="mb-0">
                            <i class="fas fa-history text-primary"></i> @Localizer.General["Audit History"]
                        </h3>
                        <button id="audit-refresh-btn" class="btn btn-primary btn-sm" onclick="loadAuditData()">
                            <i id="audit-refresh-icon" class="fas fa-sync-alt mr-1"></i>
                            @Localizer.General["Refresh"]
                        </button>
                    </div>

                    <!-- Loading State -->
                    <div id="audit-loading" class="text-center py-5" style="display: none;">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p class="lead text-muted">Loading audit history...</p>
                    </div>

                    <!-- Error State -->
                    <div id="audit-error" class="alert alert-danger d-flex align-items-center" style="display: none !important;">
                        <i class="fas fa-exclamation-triangle fa-lg mr-3"></i>
                        <div>
                            <strong>Error:</strong> <span id="audit-error-message"></span>
                            <button class="btn btn-sm btn-outline-danger ml-3" onclick="loadAuditData()">Try Again</button>
                        </div>
                    </div>

                    <!-- Summary Card -->
                    <div id="audit-summary" class="card mb-4 border-0 shadow-sm" style="display: none;">
                        <div class="card-header bg-light">
                            <h5 class="mb-0 d-flex align-items-center">
                                <i class="fas fa-chart-line text-primary mr-2"></i> @Localizer.General["Summary"]
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-3 mb-md-0">
                                    <div class="card h-100 bg-light border-0">
                                        <div class="card-body">
                                            <h6 class="text-muted text-uppercase mb-3 small"><i class="fas fa-list-alt mr-1"></i> Changes</h6>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Total</span>
                                                <span id="audit-total-changes" class="badge badge-primary badge-pill px-3 py-2">0</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Successful</span>
                                                <span id="audit-successful-changes" class="badge badge-success badge-pill px-3 py-2">0</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Failed</span>
                                                <span id="audit-failed-changes" class="badge badge-danger badge-pill px-3 py-2">0</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card h-100 bg-light border-0">
                                        <div class="card-body">
                                            <h6 class="text-muted text-uppercase mb-3 small"><i class="fas fa-info-circle mr-1"></i> Status</h6>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Current State</span>
                                                <span id="audit-current-state" class="badge badge-info badge-pill px-3 py-2">N/A</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Last Changed By</span>
                                                <span id="audit-last-user" class="font-weight-medium">N/A</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Last Change</span>
                                                <span id="audit-last-change" class="font-weight-medium">N/A</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- No Data State -->
                    <div id="audit-no-data" class="card border-0 shadow-sm" style="display: none;">
                        <div class="card-body text-center py-5">
                            <i class="fas fa-history fa-4x text-muted mb-3 opacity-50"></i>
                            <h4 class="text-muted">No Audit History Available</h4>
                            <p class="text-muted mb-4">No state changes have been recorded for this content yet.</p>
                            <button class="btn btn-outline-secondary" onclick="loadAuditData()">
                                <i class="fas fa-sync-alt mr-1"></i> Refresh
                            </button>
                        </div>
                    </div>

                    <!-- History Timeline -->
                    <div id="audit-timeline" class="audit-timeline mt-4" style="display: none;">
                        <!-- Timeline items will be inserted here by JavaScript -->
                    </div>
                </div>

                <style>
                    .audit-timeline {
                        position: relative;
                        padding-left: 40px;
                        margin-bottom: 2rem;
                    }

                    .timeline-item {
                        position: relative;
                        margin-bottom: 2.5rem;
                    }

                    .timeline-item:not(:last-child)::after {
                        content: '';
                        position: absolute;
                        left: -21px;
                        top: 45px;
                        bottom: -2.5rem;
                        width: 3px;
                        background-color: #e9ecef;
                    }

                    .timeline-marker {
                        position: absolute;
                        left: -40px;
                        top: 12px;
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 14px;
                        color: white;
                        background-color: #28a745;
                        border: 3px solid #fff;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.15);
                        z-index: 1;
                    }

                    .timeline-item-error .timeline-marker {
                        background-color: #dc3545;
                    }

                    .timeline-content {
                        flex: 1;
                    }

                    .timeline-content .card {
                        border: 0;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.08);
                        transition: box-shadow 0.3s ease;
                    }

                    .timeline-content .card:hover {
                        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                    }

                    .details-toggle {
                        cursor: pointer;
                        border: none;
                        background: none;
                        color: #007bff;
                        padding: 0.25rem 0.5rem;
                        font-size: 0.875rem;
                        border-radius: 0.2rem;
                        transition: all 0.2s ease;
                    }

                    .details-toggle:hover {
                        background-color: rgba(0, 123, 255, 0.1);
                    }

                    .details-content {
                        display: none;
                        margin-top: 1rem;
                        padding-top: 1rem;
                        border-top: 1px solid #dee2e6;
                        animation: fadeIn 0.3s ease;
                    }

                    @* Escape the @ symbol in keyframes with @@ *@
                    @@keyframes fadeIn {
                        from { opacity: 0; transform: translateY(-10px); }
                        to { opacity: 1; transform: translateY(0); }
                    }

                    .font-weight-medium {
                        font-weight: 500;
                    }

                    .badge-pill {
                        font-weight: 500;
                    }

                    .opacity-50 {
                        opacity: 0.5;
                    }
                </style>

                <script>
                    // Only define functions if not already defined (to avoid conflicts)
                    if (typeof loadAuditData === 'undefined') {
                        let auditLoading = false;
                        let auditHistory = [];
                        let auditSummary = null;

                        function showAuditLoading() {
                            const loadingEl = document.getElementById('audit-loading');
                            const errorEl = document.getElementById('audit-error');
                            const summaryEl = document.getElementById('audit-summary');
                            const timelineEl = document.getElementById('audit-timeline');
                            const noDataEl = document.getElementById('audit-no-data');
                            const refreshIcon = document.getElementById('audit-refresh-icon');
                            const refreshBtn = document.getElementById('audit-refresh-btn');
                            
                            if (loadingEl) loadingEl.style.display = 'block';
                            if (errorEl) errorEl.style.display = 'none';
                            if (summaryEl) summaryEl.style.display = 'none';
                            if (timelineEl) timelineEl.style.display = 'none';
                            if (noDataEl) noDataEl.style.display = 'none';
                            if (refreshIcon) refreshIcon.classList.add('fa-spin');
                            if (refreshBtn) refreshBtn.disabled = true;
                        }

                        function hideAuditLoading() {
                            const loadingEl = document.getElementById('audit-loading');
                            const refreshIcon = document.getElementById('audit-refresh-icon');
                            const refreshBtn = document.getElementById('audit-refresh-btn');
                            
                            if (loadingEl) loadingEl.style.display = 'none';
                            if (refreshIcon) refreshIcon.classList.remove('fa-spin');
                            if (refreshBtn) refreshBtn.disabled = false;
                        }

                        function showAuditError(message) {
                            hideAuditLoading();
                            const errorMsg = document.getElementById('audit-error-message');
                            const errorEl = document.getElementById('audit-error');
                            const summaryEl = document.getElementById('audit-summary');
                            const timelineEl = document.getElementById('audit-timeline');
                            const noDataEl = document.getElementById('audit-no-data');
                            
                            if (errorMsg) errorMsg.textContent = message;
                            if (errorEl) errorEl.style.display = 'flex';
                            
                            // Esconder os outros elementos quando há erro
                            if (summaryEl) summaryEl.style.display = 'none';
                            if (timelineEl) timelineEl.style.display = 'none';
                            if (noDataEl) noDataEl.style.display = 'none';
                        }

                        function showAuditNoData() {
                            hideAuditLoading();
                            const noDataEl = document.getElementById('audit-no-data');
                            if (noDataEl) noDataEl.style.display = 'block';
                        }

                        function formatAuditDate(dateString) {
                            if (!dateString) return 'N/A';
                            try {
                                return new Date(dateString).toLocaleString();
                            } catch (error) {
                                return dateString;
                            }
                        }

                        function updateAuditSummary(summary) {
                            const elements = {
                                'audit-total-changes': summary.totalChanges || 0,
                                'audit-successful-changes': summary.successfulChanges || 0,
                                'audit-failed-changes': summary.failedChanges || 0,
                                'audit-current-state': summary.currentState || 'N/A',
                                'audit-last-user': summary.lastChangedBy || 'N/A',
                                'audit-last-change': formatAuditDate(summary.lastChange)
                            };
                            
                            Object.keys(elements).forEach(id => {
                                const el = document.getElementById(id);
                                if (el) el.textContent = elements[id];
                            });
                            
                            const summaryEl = document.getElementById('audit-summary');
                            if (summaryEl) summaryEl.style.display = 'block';
                        }

                        // Função toggleAuditDetails removida conforme solicitado

                        function renderAuditTimeline(history) {
                            const timeline = document.getElementById('audit-timeline');
                            if (!timeline) return;
                            
                            timeline.innerHTML = '';

                            history.forEach(function(record) {
                                const timelineItem = document.createElement('div');
                                timelineItem.className = 'timeline-item' + (record.success ? '' : ' timeline-item-error');
                                
                                timelineItem.innerHTML = [
                                    '<div class="timeline-marker">',
                                        '',
                                    '</div>',
                                    '<div class="timeline-content">',
                                        '<div class="card">',
                                            '<div class="card-body">',
                                                '<div class="d-flex justify-content-between align-items-start mb-2">',
                                                    '<div>',
                                                        '<h6 class="mb-1">',
                                                            '<i class="fas fa-arrow-right text-muted"></i>',
                                                            'State Change: ',
                                                            '<span class="badge badge-secondary">' + (record.fromState || 'N/A') + '</span>',
                                                            ' → ',
                                                            '<span class="badge badge-primary">' + (record.toState || 'N/A') + '</span>',
                                                        '</h6>',
                                                        '<small class="text-muted">',
                                                            '<i class="fas fa-user"></i> ' + (record.username || 'N/A'),
                                                            '<span class="mx-2">•</span>',
                                                            '<i class="fas fa-clock"></i> ' + formatAuditDate(record.timestamp),
                                                        '</small>',
                                                    '</div>',
                                                record.transitionDescription ? 
                                                    '<div class="text-info small mt-1">' +
                                                        '<i class="fas fa-exchange-alt mr-1"></i> ' + record.transitionDescription +
                                                    '</div>' : '',
                                                    '<span class="badge ' + (record.success ? 'badge-success' : 'badge-danger') + '">',
                                                        record.success ? 'Success' : 'Failed',
                                                    '</span>',
                                                '</div>',
                                                record.comments ? 
                                                    '<div class="mb-2">' +
                                                        '<small class="text-muted">' +
                                                            '<i class="fas fa-comment"></i> Comment:' +
                                                        '</small>' +
                                                        '<p class="mb-0 pl-3">' + record.comments + '</p>' +
                                                    '</div>' : '',
                                                (!record.success && record.errorMessage) ?
                                                    '<div class="alert alert-danger" style="padding: 0.375rem 0.75rem; font-size: 0.875rem; margin-bottom: 0.5rem;">' +
                                                        '<small>' +
                                                            '<i class="fas fa-exclamation-triangle"></i>' +
                                                            '<strong>Error:</strong> ' + record.errorMessage +
                                                        '</small>' +
                                                    '</div>' : '',
                                                // Botão "Show Details" removido conforme solicitado
                                            '</div>',
                                        '</div>',
                                    '</div>'
                                ].join('');
                                
                                timeline.appendChild(timelineItem);
                            });

                            timeline.style.display = 'block';
                        }

                        async function loadAuditData() {
                            // Get content ID from the appropriate piranha object
                            const contentId = window.piranha && window.piranha.postedit && window.piranha.postedit.model 
                                ? window.piranha.postedit.model.id 
                                : window.piranha && window.piranha.pageedit && window.piranha.pageedit.model 
                                ? window.piranha.pageedit.model.id 
                                : null;
                            
                            if (!contentId) {
                                // Se estamos no modo de criação, não devemos mostrar erro
                                if (window.piranha && window.piranha.postedit && window.piranha.postedit.state === 'new') {
                                    // Não mostra erro se for um post novo
                                    showAuditNoData();
                                    return;
                                }
                                
                                // Tenta novamente após um breve atraso
                                setTimeout(function() {
                                    const retryContentId = window.piranha?.postedit?.model?.id || window.piranha?.pageedit?.model?.id || null;
                                    if (!retryContentId) {
                                        showAuditNoData();
                                    } else {
                                        loadAuditData();
                                    }
                                }, 2000);
                                return;
                            }

                            console.log('Loading audit data for content ID:', contentId);
                            showAuditLoading();

                            try {
                                // Limpa dados anteriores para evitar que dados antigos apareçam
                                auditHistory = [];
                                auditSummary = null;
                                
                                // Load history and summary in parallel
                                const historyUrl = `${window.piranha.baseUrl}api/audit/content/${contentId}/history`;
                                const summaryUrl = `${window.piranha.baseUrl}api/audit/content/${contentId}/summary`;
                                
                                console.log('Fetching from URLs:', historyUrl, summaryUrl);
                                
                                const [historyResponse, summaryResponse] = await Promise.all([
                                    fetch(historyUrl, {
                                        method: 'GET',
                                        headers: { 'Content-Type': 'application/json' },
                                        credentials: 'same-origin'
                                    }),
                                    fetch(summaryUrl, {
                                        method: 'GET',
                                        headers: { 'Content-Type': 'application/json' },
                                        credentials: 'same-origin'
                                    })
                                ]);

                                if (historyResponse.ok) {
                                    auditHistory = await historyResponse.json();
                                    console.log('Loaded audit history:', auditHistory);
                                } else if (historyResponse.status === 404) {
                                    auditHistory = [];
                                    console.log('No audit history found (404)');
                                } else {
                                    const errorText = await historyResponse.text();
                                    throw new Error(`Failed to load history: ${historyResponse.status} ${historyResponse.statusText} - ${errorText}`);
                                }

                                if (summaryResponse.ok) {
                                    auditSummary = await summaryResponse.json();
                                    console.log('Loaded audit summary:', auditSummary);
                                    updateAuditSummary(auditSummary);
                                } else {
                                    console.warn('Failed to load audit summary:', summaryResponse.status);
                                }

                                hideAuditLoading();

                                if (auditHistory && auditHistory.length > 0) {
                                    renderAuditTimeline(auditHistory);
                                } else {
                                    showAuditNoData();
                                }

                            } catch (error) {
                                console.error('Error loading audit data:', error);
                                showAuditError(error.message || 'Failed to load audit data');
                            }
                        }

                        // Auto-load when page is ready
                        if (document.readyState === 'loading') {
                            document.addEventListener('DOMContentLoaded', function() {
                                // Esconde a mensagem de erro no início
                                const errorEl = document.getElementById('audit-error');
                                if (errorEl) errorEl.style.display = 'none';
                                
                                // Inicialmente mostra o estado de carregamento
                                const loadingEl = document.getElementById('audit-loading');
                                if (loadingEl) loadingEl.style.display = 'block';
                                
                                setTimeout(loadAuditData, 3000);
                            });
                        } else {
                            // Esconde a mensagem de erro no início
                            const errorEl = document.getElementById('audit-error');
                            if (errorEl) errorEl.style.display = 'none';
                            
                            // Inicialmente mostra o estado de carregamento
                            const loadingEl = document.getElementById('audit-loading');
                            if (loadingEl) loadingEl.style.display = 'block';
                            
                            setTimeout(loadAuditData, 3000);
                        }
                    }
                </script>
            </div>
        </div>
    </div>

    <partial name="Partial/_PostSettings" />
</div>
