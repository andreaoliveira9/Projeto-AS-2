@inject ManagerLocalizer Localizer

<script>
// Workflow assignment functionality
if (typeof window.handleWorkflowChange === 'undefined') {
    window.handleWorkflowChange = function(event) {
        // Get workflowId from the event target or from Vue model
        var workflowId = null;
        
        if (event && event.target && event.target.value) {
            workflowId = event.target.value;
        } else if (window.piranha && window.piranha.pageedit && window.piranha.pageedit.model && window.piranha.pageedit.model.selectedWorkflow) {
            workflowId = window.piranha.pageedit.model.selectedWorkflow;
        }
        
        // Get page ID from multiple sources
        var pageId = null;
        
        // Method 1: Try to get from piranha.pageedit.model
        if (window.piranha && window.piranha.pageedit && window.piranha.pageedit.model && window.piranha.pageedit.model.id) {
            pageId = window.piranha.pageedit.model.id;
        }
        
        // Method 2: Extract from URL if not available from model
        if (!pageId) {
            var pathParts = window.location.pathname.split('/');
            var editIndex = pathParts.indexOf('edit');
            if (editIndex !== -1 && pathParts[editIndex + 1]) {
                var possibleId = pathParts[editIndex + 1];
                // Check if it looks like a GUID
                var guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                if (guidRegex.test(possibleId)) {
                    pageId = possibleId;
                }
            }
        }
        
        console.log('Workflow change detected - workflowId:', workflowId, 'pageId:', pageId, 'URL:', window.location.pathname);
        
        if (!workflowId || !pageId) {
            console.warn('Missing workflowId or pageId for workflow assignment', { workflowId: workflowId, pageId: pageId, url: window.location.pathname });
            if (!pageId) {
                showWorkflowMessage('Error: Unable to determine page ID. Please save the page first.', 'error');
            }
            return;
        }
        
        console.log('Assigning workflow', workflowId, 'to page', pageId);
        
        // Show loading message using DOM manipulation instead of Vue model
        showWorkflowMessage('Assigning workflow...', 'info');
        
        // Make API call to assign workflow
        fetch('/api/workflow/assign-workflow-to-page/' + pageId, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                workflowDefinitionId: workflowId
            })
        })
        .then(function(response) {
            if (!response.ok) {
                throw new Error('HTTP ' + response.status + ': ' + response.statusText);
            }
            return response.json();
        })
        .then(function(data) {
            console.log('Workflow assigned successfully:', data);
            showWorkflowMessage('Workflow assigned successfully!', 'success');
            
            // Clear success message after 5 seconds
            setTimeout(function() {
                hideWorkflowMessage();
            }, 5000);
        })
        .catch(function(error) {
            console.error('Failed to assign workflow:', error);
            showWorkflowMessage('Failed to assign workflow: ' + error.message, 'error');
            
            // Clear error message after 10 seconds
            setTimeout(function() {
                hideWorkflowMessage();
            }, 10000);
        });
    };
    
    // Helper functions to show/hide messages using DOM manipulation
    window.showWorkflowMessage = function(message, type) {
        hideWorkflowMessage(); // Remove any existing message
        
        var alertClass = 'alert-info';
        var iconClass = 'fas fa-info-circle';
        
        if (type === 'success') {
            alertClass = 'alert-success';
            iconClass = 'fas fa-check-circle';
        } else if (type === 'error') {
            alertClass = 'alert-danger';
            iconClass = 'fas fa-exclamation-triangle';
        }
        
        var messageHtml = '<div id="workflow-assignment-message" class="alert ' + alertClass + ' mt-2">' +
                         '<i class="' + iconClass + '"></i> ' + message +
                         '</div>';
        
        // Find the workflow form group and append the message
        var workflowFormGroup = document.querySelector('select[v-model="selectedWorkflow"]');
        if (workflowFormGroup && workflowFormGroup.parentNode) {
            workflowFormGroup.parentNode.insertAdjacentHTML('beforeend', messageHtml);
        }
    };
    
    window.hideWorkflowMessage = function() {
        var messageEl = document.getElementById('workflow-assignment-message');
        if (messageEl) {
            messageEl.remove();
        }
    };
}

// Alternative approach: Try to extend the Vue model if it exists
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', function() {
        // Wait for Vue to initialize and try to add the method
        setTimeout(function() {
            if (window.piranha && window.piranha.pageedit && window.piranha.pageedit.model) {
                // Add the method to the Vue instance
                window.piranha.pageedit.model.handleWorkflowChange = function() {
                    console.log('Vue method called, selectedWorkflow:', this.selectedWorkflow);
                    window.handleWorkflowChange({ target: { value: this.selectedWorkflow } });
                };
                console.log('Added handleWorkflowChange method to Vue model');
            }
        }, 2000);
    });
}
</script>

<div id="pageSettings" class="modal modal-panel fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <!-- Header -->
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title"><i class="fas fa-cog"></i> @Localizer.General["Settings"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <!-- Tabs -->
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a href="#" class="nav-link" :class="{ active: selectedSetting === 'uid-settings' }" v-on:click.prevent="selectSetting('uid-settings')">@Localizer.General["General"]</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" :class="{ active: selectedSetting === 'uid-seo' }" v-on:click.prevent="selectSetting('uid-seo')">@Localizer.General["SEO"]</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" :class="{ active: selectedSetting === 'uid-sharing' }" v-on:click.prevent="selectSetting('uid-sharing')">@Localizer.General["Sharing"]</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" :class="{ active: selectedSetting === 'uid-advanced' }" v-on:click.prevent="selectSetting('uid-advanced')">@Localizer.General["Advanced"]</a>
                </li>
                <li class="nav-item" v-for="region in settingRegions">
                    <a href="#" class="nav-link" :class="{ active: selectedSetting === region.meta.uid }" v-on:click.prevent="selectSetting(region.meta.uid)">{{ region.meta.name }}</a>
                </li>
            </ul>

            <!-- Body -->
            <div class="modal-body bg-light">
                <div :class="{ 'd-none': selectedSetting != 'uid-settings' }">
                    <div class="form-group" v-if="usePrimaryImage">
                        <label>@Localizer.Content["Primary image"]</label>
                        <div class="block image-block primary-image primary-image-modal" :class="{ readonly: isCopy}">
                            <div class="block-body has-media-picker rounded" :class="{ empty: primaryImage.id === null }">
                                <img class="rounded" :src="primaryImageUrl">
                                <div class="media-picker">
                                    <div class="btn-group float-right">
                                        <button v-on:click.prevent="selectPrimaryImage" class="btn btn-primary text-center">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                        <button v-on:click.prevent="removePrimaryImage" class="btn btn-danger text-center">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="card text-left">
                                        <div class="card-body" v-if="primaryImage.id === null">
                                            &nbsp;
                                        </div>
                                        <div class="card-body" v-else>
                                            {{ primaryImage.media.filename }}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="content-blocker"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.Page["Navigation title"]</label>
                        <div class="input-group">
                            <input v-model="navigationTitle" type="text" maxlength="128" class="form-control">
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(navigationTitle) + "/128" }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.General["Slug"]</label>
                        <div class="input-group">
                            <input v-model="slug" type="text" maxlength="128" class="form-control">
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(slug) + "/128" }}
                                </div>
                            </div>
                        </div>
                        <span class="field-description small text-muted">
                            {{ piranha.utils.getOrigin() + "/" }}<span v-text="slug"></span>
                        </span>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.General["Publish date"]</label>
                        <div class="row">
                            <div class="col">
                                <datepicker v-model="published" :format="'yyyy-MM-dd'" :monday-first="true" :typeable="true" :bootstrap-styling="true"></datepicker>
                            </div>
                            <div class="col">
                                <div class="input-group">
                                    <input class="form-control" type="time" v-model="publishedTime">
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group" v-if="useExcerpt">
                        <label>@Localizer.Content["Excerpt"]</label>
                        <div v-if="useHtmlExcerpt" class="block text-block ingress" :class="{ empty: isExcerptEmpty, readonly: isCopy }">
                            <div id="excerpt-toolbar" class="component-toolbar"></div>
                            <div id="excerpt-body" class="block-body html-block" contenteditable="true" v-html="excerpt" v-on:blur="onExcerptBlur">
                            </div>
                            <div class="content-blocker"></div>
                        </div>
                        <div v-else class="position-relative" :class="{ readonly: isCopy }">
                            <div class="input-group below">
                                <textarea v-model="excerpt" rows="5" maxlength="1000" class="form-control"></textarea>
                                <div class="input-group-append">
                                    <div class="input-group-text text-muted">
                                        {{ piranha.utils.strLength(excerpt) + "/1000" }}
                                    </div>
                                </div>
                            </div>
                            <div class="content-blocker"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Workflow</label>
                        <select v-model="selectedWorkflow" class="form-control" v-on:focus="loadWorkflowsIfNeeded" v-on:change="handleWorkflowChange">
                            <option value="">Select Workflow</option>
                            <option v-for="workflow in workflowDefinitions" :value="workflow.id">
                                {{ workflow.name }} {{ workflow.isActive ? '' : '(Inactive)' }}
                            </option>
                        </select>
                        <div v-if="selectedWorkflow && getSelectedWorkflowDetails()" class="mt-2">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-title">{{ getSelectedWorkflowDetails().name }}</h6>
                                    <p class="card-text" v-if="getSelectedWorkflowDetails().description">{{ getSelectedWorkflowDetails().description }}</p>
                                    <small class="text-muted">
                                        ID: {{ getSelectedWorkflowDetails().id }} | 
                                        Status: <span :class="getSelectedWorkflowDetails().isActive ? 'text-success' : 'text-muted'">
                                            {{ getSelectedWorkflowDetails().isActive ? 'Active' : 'Inactive' }}
                                        </span>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div :class="{ 'd-none': selectedSetting != 'uid-seo' }">
                    <div class="form-group">
                        <label>@Localizer.Page["Meta title"]</label>
                        <div class="input-group">
                            <input v-model="metaTitle" type="text" maxlength="128" class="form-control" :placeholder="title">
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(metaTitle) + "/128" }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.Page["Meta keywords"]</label>
                        <div class="input-group">
                            <input v-model="metaKeywords" type="text" maxlength="128" class="form-control">
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(metaKeywords) + "/128" }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.Page["Meta description"]</label>
                        <div class="input-group">
                            <textarea v-model="metaDescription" rows="5" maxlength="255" class="form-control"></textarea>
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(metaDescription) + "/255" }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="metaIndex">@Localizer.Content["Meta index"]</label>
                        <div class="form-switch">
                            <button id="metaIndex" v-on:click.prevent="metaIndex = !metaIndex" class="switch" :aria-pressed="metaIndex"><span></span></button>
                            <label for="metaIndex" class="form-check-label">@Localizer.Page["If the page should be indexed by search engines."]</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="metaFollow">@Localizer.Content["Meta follow"]</label>
                        <div class="form-switch">
                            <button id="metaFollow" v-on:click.prevent="metaFollow = !metaFollow" class="switch" :aria-pressed="metaFollow"><span></span></button>
                            <label for="metaFollow" class="form-check-label">@Localizer.Page["If links from this page should be indexed."]</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="d-flex">
                            <label><strong>@Localizer.Content["Meta priority"]</strong></label>
                            <span class="ml-auto">{{ metaPriorityDescription }}</span>
                        </div>
                        <input v-model="metaPriority" type="range"  class="custom-range" min="0" max="1" step="0.1">
                        <small>@Localizer.Content["Search engine priority, compared to other content in the same site."]</small>
                    </div>
                </div>

                <div :class="{ 'd-none': selectedSetting != 'uid-sharing' }">
                    <div class="form-group">
                        <label>@Localizer.Page["Og title"]</label>
                        <div class="input-group">
                            <input v-model="ogTitle" type="text" maxlength="128" class="form-control" :placeholder="metaTitle !== null && metaTitle !== '' ? metaTitle : title">
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(ogTitle) + "/128" }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.Page["Og image"]</label>
                        <image-field v-bind:uid="'og_image_' + id" v-bind:meta="{ placeholder: null }" v-bind:model="ogImage"></image-field>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.Page["Og description"]</label>
                        <div class="input-group">
                            <textarea v-model="ogDescription" rows="5" maxlength="255" class="form-control" :placeholder="metaDescription"></textarea>
                            <div class="input-group-append">
                                <div class="input-group-text text-muted">
                                    {{ piranha.utils.strLength(ogDescription) + "/255" }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div :class="{ 'd-none': selectedSetting != 'uid-advanced' }">
                    <div class="form-group">
                        <label for="isHidden">@Localizer.Page["Hidden"]</label>
                        <div class="form-switch">
                            <button id="isHidden" v-on:click.prevent="isHidden = !isHidden" class="switch" :aria-pressed="isHidden"><span></span></button>
                            <label for="isHidden" class="form-check-label">@Localizer.Page["If the page should be hidden in the sitemap"]</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="enableComments">@Localizer.General["Comments"]</label>
                        <div class="form-switch">
                            <button id="enableComments" v-on:click.prevent="enableComments = !enableComments" class="switch" :aria-pressed="enableComments"><span></span></button>
                            <label for="enableComments" class="form-check-label">@Localizer.Page["If comments should be enabled for this page"]</label>
                        </div>
                    </div>
                    <div class="form-group" :class="{ 'text-muted': !enableComments }">
                        <label>@Localizer.Comment["Days allowed for commenting"]</label>
                        <input type="number" v-model.number="closeCommentsAfterDays" class="form-control" :disabled="!enableComments">
                        <span v-if="enableComments === false" class="field-description small text-muted">
                            @Localizer.Comment["Comments are not allowed."]
                        </span>
                        <span v-else-if="published === null" class="field-description small text-muted">
                            @Localizer.Comment["Comments are not allowed for unpublished content."]
                        </span>
                        <span v-else-if="closeCommentsAfterDays === 0 || isCommentsOpen()" class="field-description small text-muted">
                            @Localizer.Comment["Comments are currently open."]
                        </span>
                        <span v-else class="field-description small text-muted">
                            @Localizer.Comment["Comments were closed"] {{ commentsClosedDate() }}.
                        </span>
                    </div>
                    <div class="form-group" v-if="routes && routes.length > 1">
                        <label>@Localizer.General["Route"]</label>
                        <select v-model="selectedRoute" class="form-control">
                            <option :value="route" v-for="route in routes">{{ route.title }}</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>@Localizer.General["Redirect"]</label>
                        <input type="text" v-model="redirectUrl" maxlength="256" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>@Localizer.General["Redirect Type"]</label>
                        <select v-model="redirectType" class="form-control" :disabled="redirectUrl === null || redirectUrl.length === 0">
                            <option v-if="redirectUrl !== null && redirectUrl.length > 0" value="Permanent">@Localizer.General["Permanent"]</option><option v-else value="Permanent"></option>
                            <option v-if="redirectUrl !== null && redirectUrl.length > 0" value="Temporary">@Localizer.General["Temporary"]</option><option v-else value="Temporary"></option>
                        </select>
                    </div>
                    <div v-if="permissions.length > 0">
                        <div class="form-group">
                            <label>@Localizer.General["Permissions"]</label>
                            <ul class="list-group">
                                <li class="list-group-item">
                                    <div class="row">
                                        <div v-for="permission in permissions" class="col-sm-6">
                                            <div class="checkbox">
                                                <label class="mb-0">
                                                    <input v-model="selectedPermissions" type="checkbox" :value="permission.key"> {{ permission.value }}
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="region" :class="{ 'd-none': selectedSetting != region.meta.uid, readonly: isCopy }" v-for="region in settingRegions">
                    <region v-bind:content="'page'" v-bind:type="typeId" v-bind:model="region"></region>
                    <div class="content-blocker"></div>
                </div>
            </div>
        </div>
    </div>
</div>
