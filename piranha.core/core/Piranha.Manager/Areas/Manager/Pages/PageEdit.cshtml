@page "~/manager/page/{routeAction}/{id}/{pageType?}/{after?}"
@model PageEditViewModel
@inject ManagerLocalizer Localizer
@inject Piranha.Config Config
@{
    ViewBag.Title = Localizer.Page["Edit page"];
    ViewBag.MenuItem = "Pages";
    string action = ((string)RouteData.Values["routeAction"]).ToLower();
}
@section script
{
    <script src="@Url.Content(Piranha.Manager.Editor.EditorScripts.MainScriptUrl)"></script>
    <script src="@Url.Content(Piranha.Manager.Editor.EditorScripts.EditorScriptUrl)"></script>
    <script src="~/manager/assets/js/piranha.components.min.js?v=@Piranha.Utils.GetAssemblyVersionHash(typeof(Piranha.Manager.Module).Assembly)"></script>
    <script src="~/manager/assets/js/piranha.pageedit.min.js?v=@Piranha.Utils.GetAssemblyVersionHash(typeof(Piranha.Manager.Module).Assembly)"></script>

    @if (action == "edit")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.pageedit.load("@RouteData.Values["id"]");
                $(".title input").focus();
            });
        </script>
    }
    else if (action == "add")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.pageedit.create("@RouteData.Values["id"]", "@RouteData.Values["pageType"]");
                $(".title input").focus();
            });
        </script>
    }
    else if (action == "addrelative")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.pageedit.createrelative("@RouteData.Values["id"]", "@RouteData.Values["pageType"]", "@RouteData.Values["after"]");
                $(".title input").focus();
            });
        </script>
    }
    else if (action == "copy")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.pageedit.copy("@RouteData.Values["id"]", "@RouteData.Values["pageType"]");
                $(".title input").focus();
            });
        </script>
    }
    else if (action == "copyrelative")
    {
        <script>
            piranha.permissions.load(function () {
                piranha.pageedit.copyrelative("@RouteData.Values["id"]", "@RouteData.Values["pageType"]", "@RouteData.Values["after"]");
                $(".title input").focus();
            });
        </script>
    }
}

<div id="pageedit">
    <div class="top">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">@Localizer.Menu["Content"]</li>
                <li class="breadcrumb-item"><a href="~/manager/pages">@Localizer.Menu["Pages"]</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Localizer.General["Edit"]</li>
                <li v-if="isCopy" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-warning">@Localizer.General["Copy"]</span></li>
                <li v-if="isScheduled" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-info"><i class="fas fa-calendar-alt"></i> @Localizer.General["Scheduled"]</span></li>
                <li v-if="state === 'unpublished'" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-info"><i class="fas fa-unlink"></i> @Localizer.General["Unpublished"]</span></li>
                <li v-if="state === 'draft'" class="badge-item app" :class="{ ready: !loading }"><span class="badge badge-info"><i class="fas fa-pen"></i> @Localizer.General["Draft"]</span></li>
            </ol>
        </nav>

        <div class="container-fluid app" :class="{ ready: !loading }">
            <div class="top-nav">
                @foreach (var menuAction in Piranha.Manager.Actions.Toolbars.PageEdit)
                {
                    <partial name="@menuAction.ActionView" />
                }
            </div>
        </div>
    </div>

    <div class="container-fluid app" :class="{ ready: !loading }">
        <div v-if="isCopy" class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <div class="alert alert-info region-center">
                            <p>
                                @Localizer.Page["This is a copy. In order to edit the content of the page you first need to detach it from the original. If you want to keep the page as a copy you should edit the content of the original page."]
                            </p>
                            <p class="text-right">
                                <a v-if="state !== 'new'" v-on:click.prevent="detach()" href="#" class="btn btn-primary btn-labeled"><i class="fas fa-cut"></i> @Localizer.Page["Detach page"]</a>
                                <a :href="piranha.baseUrl + 'manager/page/edit/' + originalId" class="btn btn-primary btn-labeled"><i class="fas fa-pen"></i> @Localizer.Page["Edit original"]</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content navigation - MODIFIED TO INCLUDE AUDIT TAB -->
        <ul v-if="(useBlocks && (editors.length + contentRegions.length > 0)) || editors.length + contentRegions.length > 1 || (enableComments && (commentCount > 0 || pendingCommentCount > 0)) || state !== 'new'" class="nav nav-pills nav-pills-card justify-content-center">
            <li v-if="useBlocks" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion({ uid: 'uid-blocks' })" :class="{ active: selectedRegion.uid === 'uid-blocks' }" href="#">
                    <i class="fas fa-pen-alt"></i>@Localizer.General["Main content"]
                </a>
            </li>
            <li v-for="editor in editors" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion(editor)" :class="{ active: selectedRegion.uid == editor.uid }" href="#">
                    <i :class="editor.icon"></i>{{ editor.name }}
                </a>
            </li>
            <li v-for="region in contentRegions" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion(region.meta)" :class="{ active: selectedRegion.uid == region.meta.uid }" href="#">
                    <i :class="region.meta.icon"></i>{{ region.meta.name }}
                </a>
            </li>
            <li v-if="enableComments && (commentCount > 0 || pendingCommentCount > 0)" class="nav-item">
                <a :href="piranha.baseUrl + 'manager/comments/' + id" target="comments" class="nav-link">
                    <i class="fas fa-comments"></i>@Localizer.General["Comments"]
                    <span v-if="pendingCommentCount > 0" class="badge badge-danger">{{ pendingCommentCount }}</span>
                </a>
            </li>
            <!-- ADD AUDIT HISTORY TAB - Only show for existing pages -->
            <li v-if="state !== 'new'" class="nav-item">
                <a class="nav-link" v-on:click.prevent="selectRegion({ uid: 'uid-audit' })" :class="{ active: selectedRegion.uid === 'uid-audit' }" href="#">
                    <i class="fas fa-history"></i>@Localizer.General["Audit History"]
                </a>
            </li>
        </ul>

        <!-- Title -->
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <div class="form-group title">
                            <input v-model="title" type="text" class="form-control form-control-lg" placeholder="@Localizer.Page["Your page title"]">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Blocks -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != 'uid-blocks' }">
            <div class="card-body" v-bind:class="{ readonly: isCopy }">
                <div id="content-blocks" class="blocks@(Config.ManagerOutlined ? " blocks-outline" : "")">
                    <a v-if="!isCopy" href="#" class="block-add unsortable" v-on:click.prevent="piranha.blockpicker.open(piranha.pageedit.addBlock, 0)">
                        <hr>
                        <i class="fas fa-plus-circle"></i>
                    </a>
                    <span v-else class="block-add unsortable"><hr><i class="fas fa-plus-circle"></i></span>
                    <div v-for="(block, index) in blocks" v-bind:key="block.meta.uid">
                        <div :class="'block ' + block.meta.component + (block.meta.isCollapsed ? ' collapsed' : '') + (block.meta.width === 'full' ? ' block-full' : '')">
                            <div :id="'tb-' + block.meta.uid" class="component-toolbar"></div>
                            <div class="block-header">
                                <div class="title">
                                    <i :class="block.meta.icon"></i><strong>{{ block.meta.name }}</strong> <span v-if="!block.meta.isGroup && block.meta.isCollapsed">- {{ block.meta.title }}</span>
                                </div>
                                <div class="actions">
                                    <span v-on:click.prevent="collapseBlock(block)" class="btn btn-sm">
                                        <i v-if="block.meta.isCollapsed" class="fas fa-chevron-down"></i>
                                        <i v-else class="fas fa-chevron-up"></i>
                                    </span>
                                    <span class="btn btn-sm handle">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </span>
                                    <button v-on:click.prevent="removeBlock(block)" class="btn btn-sm danger block-remove" tabindex="-1">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <component v-if="!block.meta.isGroup" v-bind:is="block.meta.component" v-bind:uid="block.meta.uid" v-bind:toolbar="'tb-' + block.meta.uid" v-bind:model="block.model" v-on:update-title='updateBlockTitle($event)'></component>
                            <component v-if="block.meta.isGroup" v-bind:is="block.meta.component" v-bind:uid="block.meta.uid" v-bind:toolbar="'tb-' + block.meta.uid" v-bind:model="block"></component>
                            <div class="content-blocker"></div>
                        </div>
                        <a v-if="!isCopy" href="#" class="block-add" v-on:click.prevent="piranha.blockpicker.open(piranha.pageedit.addBlock, index + 1)">
                            <hr>
                            <i class="fas fa-plus-circle"></i>
                        </a>
                        <span v-else class="block-add"><hr><i class="fas fa-plus-circle"></i></span>
                    </div>
                    <div v-if="blocks.length == 0" class="empty-info">
                        <p>@Localizer.Page["Welcome to your new page. Click on the button above to add your first block of content!"]</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Custom Editors -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != editor.uid }" v-for="editor in editors">
            <div class="card-body">
                <div class="region-center">
                    <component v-bind:is="editor.component" v-bind:uid="editor.uid" v-bind:id="id"></component>
                </div>
            </div>
        </div>

        <!-- Content Regions -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != region.meta.uid }" v-for="region in contentRegions">
            <div class="card-body">
                <div class="region" :class="{ readonly: isCopy, 'region-center': region.meta.width === 'centered' }">
                    <region v-bind:content="'page'" v-bind:type="typeId" v-bind:model="region"></region>
                    <div class="content-blocker"></div>
                </div>
            </div>
        </div>

        <!-- AUDIT HISTORY TAB CONTENT -->
        <div class="card" :class="{ 'd-none': selectedRegion.uid != 'uid-audit' }">
            <div class="card-body">
                <div id="audit-history-container">
                    <!-- Script para inicialização -->
                    <script>
                        // Garante que o erro não seja exibido inicialmente
                        document.addEventListener('DOMContentLoaded', function() {
                            var errorEl = document.getElementById('audit-error');
                            if (errorEl) errorEl.style.display = 'none';
                        });
                    </script>
                    
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3 class="mb-0">
                            <i class="fas fa-history text-primary"></i> @Localizer.General["Audit History"]
                        </h3>
                        <button id="audit-refresh-btn" class="btn btn-primary btn-sm" onclick="loadAuditData()">
                            <i id="audit-refresh-icon" class="fas fa-sync-alt mr-1"></i>
                            @Localizer.General["Refresh"]
                        </button>
                    </div>

                    <!-- Loading State -->
                    <div id="audit-loading" class="text-center py-5" style="display: none;">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p class="lead text-muted">Loading audit history...</p>
                    </div>

                    <!-- Summary Card -->
                    <div id="audit-summary" class="card mb-4 border-0 shadow-sm" style="display: none;">
                        <div class="card-header bg-light">
                            <h5 class="mb-0 d-flex align-items-center">
                                <i class="fas fa-chart-line text-primary mr-2"></i> @Localizer.General["Summary"]
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4 mb-3 mb-md-0">
                                    <div class="card h-100 bg-light border-0">
                                        <div class="card-body">
                                            <h6 class="text-muted text-uppercase mb-3 small"><i class="fas fa-list-alt mr-1"></i> Changes</h6>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Total</span>
                                                <span id="audit-total-changes" class="badge badge-primary badge-pill px-3 py-2">0</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Successful</span>
                                                <span id="audit-successful-changes" class="badge badge-success badge-pill px-3 py-2">0</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Failed</span>
                                                <span id="audit-failed-changes" class="badge badge-danger badge-pill px-3 py-2">0</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-4 mb-3 mb-md-0">
                                    <div class="card h-100 bg-light border-0">
                                        <div class="card-body">
                                            <h6 class="text-muted text-uppercase mb-3 small"><i class="fas fa-check-circle mr-1"></i> Approvals</h6>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Approved</span>
                                                <span id="audit-approved-changes" class="badge badge-success badge-pill px-3 py-2">0</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Rejected</span>
                                                <span id="audit-rejected-changes" class="badge badge-warning badge-pill px-3 py-2">0</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="card h-100 bg-light border-0">
                                        <div class="card-body">
                                            <h6 class="text-muted text-uppercase mb-3 small"><i class="fas fa-info-circle mr-1"></i> Status</h6>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Current State</span>
                                                <span id="audit-current-state" class="badge badge-info badge-pill px-3 py-2">N/A</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span>Last Changed By</span>
                                                <span id="audit-last-user" class="font-weight-medium">N/A</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Last Change</span>
                                                <span id="audit-last-change" class="font-weight-medium">N/A</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- No Data State -->
                    <div id="audit-no-data" class="card border-0 shadow-sm" style="display: none;">
                        <div class="card-body text-center py-5">
                            <i class="fas fa-history fa-4x text-muted mb-3 opacity-50"></i>
                            <h4 class="text-muted">No Audit History Available</h4>
                            <p class="text-muted mb-4">No state changes have been recorded for this content yet.</p>
                            <button class="btn btn-outline-secondary" onclick="loadAuditData()">
                                <i class="fas fa-sync-alt mr-1"></i> Refresh
                            </button>
                        </div>
                    </div>

                    <!-- History Timeline -->
                    <div id="audit-timeline" class="audit-timeline mt-4" style="display: none;">
                        <!-- Timeline items will be inserted here by JavaScript -->
                    </div>
                </div>

                <style>
                    .audit-timeline {
                        position: relative;
                        padding-left: 40px;
                        margin-bottom: 2rem;
                    }

                    .timeline-item {
                        position: relative;
                        margin-bottom: 2.5rem;
                    }

                    .timeline-item:not(:last-child)::after {
                        content: '';
                        position: absolute;
                        left: -21px;
                        top: 45px;
                        bottom: -2.5rem;
                        width: 3px;
                        background-color: #e9ecef;
                    }

                    .timeline-item-approved .timeline-marker {
                        background-color: #28a745;
                    }

                    .timeline-item-rejected .timeline-marker {
                        background-color: #ffc107;
                    }

                    .approval-status {
                        display: inline-block;
                        padding: 0.25rem 0.75rem;
                        border-radius: 0.375rem;
                        font-size: 0.875rem;
                        font-weight: 500;
                    }

                    .approval-status.approved {
                        background-color: #d4edda;
                        color: #155724;
                        border: 1px solid #c3e6cb;
                    }

                    .approval-status.rejected {
                        background-color: #fff3cd;
                        color: #856404;
                        border: 1px solid #ffeaa7;
                    }

                    .timeline-marker {
                        position: absolute;
                        left: -40px;
                        top: 12px;
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 14px;
                        color: white;
                        background-color: #28a745;
                        border: 3px solid #fff;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.15);
                        z-index: 1;
                    }

                    .timeline-item-error .timeline-marker {
                        background-color: #dc3545;
                    }

                    .timeline-content {
                        flex: 1;
                    }

                    .timeline-content .card {
                        border: 0;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.08);
                        transition: box-shadow 0.3s ease;
                    }

                    .timeline-content .card:hover {
                        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                    }

                    /* Estilos relacionados aos detalhes removidos conforme solicitado */

                    @* Escape the @ symbol in keyframes with @@ *@
                    @@keyframes fadeIn {
                        from { opacity: 0; transform: translateY(-10px); }
                        to { opacity: 1; transform: translateY(0); }
                    }

                    .font-weight-medium {
                        font-weight: 500;
                    }

                    .badge-pill {
                        font-weight: 500;
                    }

                    .opacity-50 {
                        opacity: 0.5;
                    }
                </style>

                <script>
                    // Audit History JavaScript - Pure JS without template literals
                    var auditLoading = false;
                    var auditHistory = [];
                    var auditSummary = null;

                    function showAuditLoading() {
                        var loadingEl = document.getElementById('audit-loading');
                        var errorEl = document.getElementById('audit-error');
                        var summaryEl = document.getElementById('audit-summary');
                        var timelineEl = document.getElementById('audit-timeline');
                        var noDataEl = document.getElementById('audit-no-data');
                        var refreshIcon = document.getElementById('audit-refresh-icon');
                        var refreshBtn = document.getElementById('audit-refresh-btn');
                        
                        if (loadingEl) loadingEl.style.display = 'block';
                        if (errorEl) errorEl.style.display = 'none';
                        if (summaryEl) summaryEl.style.display = 'none';
                        if (timelineEl) timelineEl.style.display = 'none';
                        if (noDataEl) noDataEl.style.display = 'none';
                        if (refreshIcon) refreshIcon.classList.add('fa-spin');
                        if (refreshBtn) refreshBtn.disabled = true;
                    }

                    function hideAuditLoading() {
                        var loadingEl = document.getElementById('audit-loading');
                        var refreshIcon = document.getElementById('audit-refresh-icon');
                        var refreshBtn = document.getElementById('audit-refresh-btn');
                        
                        if (loadingEl) loadingEl.style.display = 'none';
                        if (refreshIcon) refreshIcon.classList.remove('fa-spin');
                        if (refreshBtn) refreshBtn.disabled = false;
                    }

                    function showAuditError(message) {
                        hideAuditLoading();
                        var errorEl = document.getElementById('audit-error');
                        var summaryEl = document.getElementById('audit-summary');
                        var timelineEl = document.getElementById('audit-timeline');
                        var noDataEl = document.getElementById('audit-no-data');
                        
                        if (errorEl) errorEl.style.display = 'flex';
                        
                        // Esconder os outros elementos quando há erro
                        if (summaryEl) summaryEl.style.display = 'none';
                        if (timelineEl) timelineEl.style.display = 'none';
                        if (noDataEl) noDataEl.style.display = 'none';
                    }

                    function showAuditNoData() {
                        hideAuditLoading();
                        var noDataEl = document.getElementById('audit-no-data');
                        if (noDataEl) noDataEl.style.display = 'block';
                    }

                    function formatAuditDate(dateString) {
                        if (!dateString) return 'N/A';
                        try {
                            return new Date(dateString).toLocaleString();
                        } catch (error) {
                            return dateString;
                        }
                    }

                    function updateAuditSummary(summary) {
                        var elements = {
                            'audit-total-changes': summary.totalChanges || 0,
                            'audit-successful-changes': summary.successfulChanges || 0,
                            'audit-failed-changes': summary.failedChanges || 0,
                            'audit-approved-changes': summary.approvedChanges || 0,
                            'audit-rejected-changes': summary.rejectedChanges || 0,
                            'audit-current-state': summary.currentState || 'N/A',
                            'audit-last-user': summary.lastChangedBy || 'N/A',
                            'audit-last-change': formatAuditDate(summary.lastChange)
                        };
                        
                        for (var id in elements) {
                            var el = document.getElementById(id);
                            if (el) el.textContent = elements[id];
                        }
                        
                        var summaryEl = document.getElementById('audit-summary');
                        if (summaryEl) summaryEl.style.display = 'block';
                    }

                    function getApprovalStatusText(approved) {
                        if (approved === true) return 'Approved';
                        if (approved === false) return 'Rejected';
                        return 'Unknown';
                    }

                    function getApprovalStatusClass(approved) {
                        if (approved === true) return 'approved';
                        if (approved === false) return 'rejected';
                        return '';
                    }

                    function getTimelineItemClass(record) {
                        var classes = 'timeline-item';

                        if (!record.success) {
                            classes += ' timeline-item-error';
                        } else if (record.approved === true) {
                            classes += ' timeline-item-approved';
                        } else if (record.approved === false) {
                            classes += ' timeline-item-rejected';
                        }

                        return classes;
                    }

                    // Função toggleAuditDetails removida conforme solicitado

                    function renderAuditTimeline(history) {
                        var timeline = document.getElementById('audit-timeline');
                        if (!timeline) return;
                        
                        timeline.innerHTML = '';

                        for (var i = 0; i < history.length; i++) {
                            var record = history[i];
                            var timelineItem = document.createElement('div');
                            timelineItem.className = getTimelineItemClass(record);
                            
                            var html = '';
                            html += '<div class="timeline-marker">';
                            html += '</div>';
                            html += '<div class="timeline-content">';
                            html += '<div class="card mb-0">';
                            html += '<div class="card-body">';
                            html += '<div class="d-flex justify-content-between align-items-start mb-3">';
                            html += '<div>';
                            html += '<h5 class="mb-1">';
                            html += 'State Change: ';
                            html += '<span class="badge badge-secondary px-2 py-1">' + (record.fromState || 'N/A') + '</span>';
                            html += ' <i class="fas fa-arrow-right text-muted mx-1"></i> ';
                            html += '<span class="badge badge-primary px-2 py-1">' + (record.toState || 'N/A') + '</span>';
                            html += '</h5>';
                            html += '<div class="text-muted small">';
                            html += '<i class="fas fa-user mr-1"></i> ' + (record.reviewedBy || record.username || 'N/A');
                            html += '<span class="mx-2">•</span>';
                            html += '<i class="fas fa-clock mr-1"></i> ' + formatAuditDate(record.timestamp);
                            html += '</div>';
                            if (record.transitionDescription) {
                                html += '<div class="text-info small mt-1">';
                                html += '<i class="fas fa-exchange-alt mr-1"></i> ' + record.transitionDescription;
                                html += '</div>';
                            }
                            html += '</div>';
                            html += '<div class="d-flex flex-column align-items-end">';
                            // Add approval status display
                            if (record.approved !== undefined && record.approved !== null) {
                                html += '<span class="approval-status ' + getApprovalStatusClass(record.approved) + ' mb-2">';
                                html += '<i class="fas ' + (record.approved ? 'fa-check-circle' : 'fa-times-circle') + ' mr-1"></i>';
                                html += getApprovalStatusText(record.approved);
                                html += '</span>';
                            }
                            html += '<span class="badge ' + (record.success ? 'badge-success' : 'badge-danger') + ' px-3 py-2">';
                            html += record.success ? '<i class="fas fa-check-circle mr-1"></i> Success' : '<i class="fas fa-times-circle mr-1"></i> Failed';
                            html += '</span>';
                            html += '</div>';
                            html += '</div>';
                            
                            if (record.comments) {
                                html += '<div class="p-3 bg-light rounded mb-3">';
                                html += '<div class="d-flex">';
                                html += '<i class="fas fa-comment text-muted mt-1 mr-2"></i>';
                                html += '<div>';
                                html += '<div class="small text-muted mb-1">Comment:</div>';
                                html += '<div>' + record.comments + '</div>';
                                html += '</div>';
                                html += '</div>';
                                html += '</div>';
                            }
                            
                            if (!record.success && record.errorMessage) {
                                html += '<div class="alert alert-danger mb-3">';
                                html += '<div class="d-flex">';
                                html += '<i class="fas fa-exclamation-triangle mt-1 mr-2"></i>';
                                html += '<div>';
                                html += '<div class="font-weight-bold mb-1">Error Message:</div>';
                                html += '<div>' + record.errorMessage + '</div>';
                                html += '</div>';
                                html += '</div>';
                                html += '</div>';
                            }
                            
                            // Removido o botão "Show Details" conforme solicitado
                            html += '</div>';
                            html += '</div>';
                            html += '</div>';
                            
                            timelineItem.innerHTML = html;
                            timeline.appendChild(timelineItem);
                        }

                        timeline.style.display = 'block';
                    }

                    function getContentId() {
                        // Try multiple ways to get the content ID
                        var contentId = null;
                        
                        // Method 1: Check piranha.pageedit
                        if (window.piranha && window.piranha.pageedit && window.piranha.pageedit.model && window.piranha.pageedit.model.id) {
                            contentId = window.piranha.pageedit.model.id;
                        }
                        // Method 2: Check piranha.postedit  
                        else if (window.piranha && window.piranha.postedit && window.piranha.postedit.model && window.piranha.postedit.model.id) {
                            contentId = window.piranha.postedit.model.id;
                        }
                        // Method 3: Try to get from URL
                        else {
                            var pathParts = window.location.pathname.split('/');
                            for (var i = 0; i < pathParts.length; i++) {
                                if (pathParts[i] === 'edit' && pathParts[i + 1]) {
                                    // Check if it looks like a GUID
                                    var possibleId = pathParts[i + 1];
                                    var guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                                    if (guidRegex.test(possibleId)) {
                                        contentId = possibleId;
                                        break;
                                    }
                                }
                            }
                        }
                        
                        return contentId;
                    }

                    function loadAuditData() {
                        var contentId = getContentId();
                        
                        if (!contentId) {
                            // Se estamos no modo de criação, não devemos mostrar erro
                            if (window.piranha && window.piranha.pageedit && window.piranha.pageedit.state === 'new') {
                                // Não mostra erro se for uma página nova
                                showAuditNoData();
                                return;
                            }
                            
                            // Tenta novamente após um breve atraso (pode ser que a página ainda esteja carregando)
                            setTimeout(function() {
                                contentId = getContentId();
                                if (!contentId) {
                                    showAuditNoData();
                                } else {
                                    loadAuditData();
                                }
                            }, 2000);
                            return;
                        }

                        console.log('Loading audit data for content ID:', contentId);
                        showAuditLoading();

                        var historyUrl = (window.piranha ? window.piranha.baseUrl : '/') + 'api/audit/content/' + contentId + '/history';
                        var summaryUrl = (window.piranha ? window.piranha.baseUrl : '/') + 'api/audit/content/' + contentId + '/summary';
                        
                        console.log('Fetching from URLs:', historyUrl, summaryUrl);
                        
                        // Limpa dados anteriores para evitar que dados antigos apareçam
                        auditHistory = [];
                        auditSummary = null;
                        
                        // Load history
                        fetch(historyUrl, {
                            method: 'GET',
                            headers: piranha.utils.antiForgeryHeaders()
                        })
                        .then(function(response) {
                            if (response.ok) {
                                return response.json();
                            } else if (response.status === 404) {
                                return [];
                            } else {
                                throw new Error('Failed to load history: ' + response.status + ' ' + response.statusText);
                            }
                        })
                        .then(function(data) {
                            auditHistory = data;
                            console.log('Loaded audit history:', auditHistory);
                            
                            // Load summary
                            return fetch(summaryUrl, {
                                method: 'GET',
                                headers: piranha.utils.antiForgeryHeaders()
                            });
                        })
                        .then(function(response) {
                            if (response.ok) {
                                return response.json();
                            } else {
                                console.warn('Failed to load audit summary:', response.status);
                                return null;
                            }
                        })
                        .then(function(summaryData) {
                            if (summaryData) {
                                auditSummary = summaryData;
                                console.log('Loaded audit summary:', auditSummary);
                                updateAuditSummary(auditSummary);
                            }
                            
                            hideAuditLoading();

                            if (auditHistory && auditHistory.length > 0) {
                                renderAuditTimeline(auditHistory);
                            } else {
                                showAuditNoData();
                            }
                        })
                        .catch(function(error) {
                            console.error('Error loading audit data:', error);
                            showAuditError(error.message || 'Failed to load audit data');
                        });
                    }

                    // Auto-load when page is ready
                    if (document.readyState === 'loading') {
                        document.addEventListener('DOMContentLoaded', function() {
                            // Esconde a mensagem de erro no início
                            var errorEl = document.getElementById('audit-error');
                            if (errorEl) errorEl.style.display = 'none';
                            
                            // Inicialmente mostra o estado de carregamento até que os dados sejam obtidos
                            var loadingEl = document.getElementById('audit-loading');
                            if (loadingEl) loadingEl.style.display = 'block';
                            
                            setTimeout(loadAuditData, 3000);
                        });
                    } else {
                        // Esconde a mensagem de erro no início
                        var errorEl = document.getElementById('audit-error');
                        if (errorEl) errorEl.style.display = 'none';
                        
                        // Inicialmente mostra o estado de carregamento até que os dados sejam obtidos
                        var loadingEl = document.getElementById('audit-loading');
                        if (loadingEl) loadingEl.style.display = 'block';
                        
                        setTimeout(loadAuditData, 3000);
                    }
                </script>
            </div>
        </div>
    </div>

    <partial name="Partial/_PageSettings" />
</div>